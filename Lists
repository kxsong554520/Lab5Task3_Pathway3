// 1. Lists
fun main() {
    val numbers: List<Int> = listOf(1, 2, 3, 4, 5, 6)
    println("List: $numbers")
    println("Size: ${numbers.size}")

    // Access elements of the list
    println("First element: ${numbers[0]}")
    println("Second element: ${numbers[1]}")
    println("Last index: ${numbers.size - 1}")
    println("Last element: ${numbers[numbers.size - 1]}")
    println("First: ${numbers.first()}")
    println("Last: ${numbers.last()}")

    // Use the contains() method
    println("Contains 4? ${numbers.contains(4)}")
    println("Contains 7? ${numbers.contains(7)}")
}

// 2.List is read-only but can have operations that returns new different list
fun main() {
    val colors = listOf("green", "orange", "blue")
    
    colors.add("purple")
	  colors[0] = "yellow"
    // this will cause error as you cannot add new elements to the list
    
    println("Reversed list: ${colors.reversed()}")
	  println("List: $colors")
    //reversing the list
    
    println("Sorted list: ${colors.sorted()}")
    //sort list by abc
}

fun main(){
  val oddNumbers = listOf(5, 3, 7, 1)
  println("List: $oddNumbers")
  println("Sorted list: ${oddNumbers.sorted()}")
  // sort number from small to large
}

// 3.mutable lists
fun main() {
	val entrees: MutableList<String> = mutableListOf()
    val moreItems = listOf("ravioli", "lasagna", "fettuccine")

    //adding items to mutableList
    println("Add noodles: ${entrees.add("noodles")}")
    println("Add spaghetti: ${entrees.add("spaghetti")}")
    println("Add list: ${entrees.addAll(moreItems)}")
    println("Entrees: $entrees")

    //Remove items from mutableList
    println("Remove spaghetti: ${entrees.remove("spaghetti")}")
	  println("Entrees: $entrees")

    //Remove items that doesn't exists in the list will return false
    println("Remove item that doesn't exist: ${entrees.remove("rice")}")
	  println("Entrees: $entrees")

    //Remove first element of the mutableList
    println("Remove first element: ${entrees.removeAt(0)}")
	  println("Entrees: $entrees")

    //Remove all elements in the MutableList
    entrees.clear()
	  println("Entrees: $entrees")

    //check if the list is empty and it will return true
    println("Empty? ${entrees.isEmpty()}")
}

// 4. use lists
fun main() {
	val guestsPerFamily = listOf(2, 4, 1, 3)
	var totalGuests = 0
	var index = 0
	while (index < guestsPerFamily.size) {
    	totalGuests += guestsPerFamily[index]
    	index++
	}
	println("Total Guest Count: $totalGuests")
}

//5. for loops in list
fun main() {
	val names = listOf("Jessica", "Henry", "Alicia", "Jose")
  for (name in names) {
    	println("$name - Number of characters: ${name.length}")
	}
}

// 6. List practice
open class Item(val name: String, val price: Int)

class Noodles : Item("Noodles", 10) {
    override fun toString(): String {
        return name
    }
}

class Vegetables(vararg val toppings: String) : Item("Vegetables", 5) {
    override fun toString(): String {
        if (toppings.isEmpty()) {
            return "$name Chef's Choice"
        } else {
            return name + " " + toppings.joinToString()
        }
    }
}

class Order(val orderNumber: Int) {
    private val itemList = mutableListOf<Item>()

    fun addItem(newItem: Item): Order {
        itemList.add(newItem)
        return this
    }

    fun addAll(newItems: List<Item>): Order {
        itemList.addAll(newItems)
        return this
    }

    fun print() {
        println("Order #${orderNumber}")
        var total = 0
        for (item in itemList) {
            println("${item}: $${item.price}")
            total += item.price
        }
        println("Total: $${total}")
    }
}

fun main() {
    val ordersList = mutableListOf<Order>()

    // Add an item to an order
    val order1 = Order(1)
    order1.addItem(Noodles())
    ordersList.add(order1)

    // Add multiple items individually
    val order2 = Order(2)
    order2.addItem(Noodles())
    order2.addItem(Vegetables())
    ordersList.add(order2)

    // Add a list of items at one time
    val order3 = Order(3)
    val items = listOf(Noodles(), Vegetables("Carrots", "Beans", "Celery"))
    order3.addAll(items)
    ordersList.add(order3)

    // Use builder pattern
    val order4 = Order(4)
        .addItem(Noodles())
        .addItem(Vegetables("Cabbage", "Onion"))
    ordersList.add(order4)

    // Create and add order directly
    ordersList.add(
        Order(5)
            .addItem(Noodles())
            .addItem(Noodles())
            .addItem(Vegetables("Spinach"))
    )

    // Print out each order
    for (order in ordersList) {
        order.print()
        println()
    }
}
